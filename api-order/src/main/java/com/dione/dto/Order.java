/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.dione.dto;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Order extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -19197640573391496L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Order\",\"namespace\":\"com.dione.dto\",\"fields\":[{\"name\":\"orderId\",\"type\":\"string\"},{\"name\":\"customerId\",\"type\":\"string\"},{\"name\":\"orderDate\",\"type\":\"string\"},{\"name\":\"shippingAddress\",\"type\":\"string\"},{\"name\":\"billingAddress\",\"type\":\"string\"},{\"name\":\"orderStatus\",\"type\":\"string\"},{\"name\":\"paymentMethod\",\"type\":\"string\"},{\"name\":\"totalAmount\",\"type\":\"string\"},{\"name\":\"currency\",\"type\":\"string\"},{\"name\":\"productId_1\",\"type\":\"string\"},{\"name\":\"productName_1\",\"type\":\"string\"},{\"name\":\"quantity_1\",\"type\":\"string\"},{\"name\":\"price_1\",\"type\":\"string\"},{\"name\":\"productId_2\",\"type\":\"string\"},{\"name\":\"productName_2\",\"type\":\"string\"},{\"name\":\"quantity_2\",\"type\":\"string\"},{\"name\":\"price_2\",\"type\":\"string\"},{\"name\":\"productId_3\",\"type\":\"string\"},{\"name\":\"productName_3\",\"type\":\"string\"},{\"name\":\"quantity_3\",\"type\":\"string\"},{\"name\":\"price_3\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Order> ENCODER =
      new BinaryMessageEncoder<Order>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Order> DECODER =
      new BinaryMessageDecoder<Order>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Order> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Order> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Order>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Order to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Order from a ByteBuffer. */
  public static Order fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence orderId;
  @Deprecated public java.lang.CharSequence customerId;
  @Deprecated public java.lang.CharSequence orderDate;
  @Deprecated public java.lang.CharSequence shippingAddress;
  @Deprecated public java.lang.CharSequence billingAddress;
  @Deprecated public java.lang.CharSequence orderStatus;
  @Deprecated public java.lang.CharSequence paymentMethod;
  @Deprecated public java.lang.CharSequence totalAmount;
  @Deprecated public java.lang.CharSequence currency;
  @Deprecated public java.lang.CharSequence productId_1;
  @Deprecated public java.lang.CharSequence productName_1;
  @Deprecated public java.lang.CharSequence quantity_1;
  @Deprecated public java.lang.CharSequence price_1;
  @Deprecated public java.lang.CharSequence productId_2;
  @Deprecated public java.lang.CharSequence productName_2;
  @Deprecated public java.lang.CharSequence quantity_2;
  @Deprecated public java.lang.CharSequence price_2;
  @Deprecated public java.lang.CharSequence productId_3;
  @Deprecated public java.lang.CharSequence productName_3;
  @Deprecated public java.lang.CharSequence quantity_3;
  @Deprecated public java.lang.CharSequence price_3;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Order() {}

  /**
   * All-args constructor.
   * @param orderId The new value for orderId
   * @param customerId The new value for customerId
   * @param orderDate The new value for orderDate
   * @param shippingAddress The new value for shippingAddress
   * @param billingAddress The new value for billingAddress
   * @param orderStatus The new value for orderStatus
   * @param paymentMethod The new value for paymentMethod
   * @param totalAmount The new value for totalAmount
   * @param currency The new value for currency
   * @param productId_1 The new value for productId_1
   * @param productName_1 The new value for productName_1
   * @param quantity_1 The new value for quantity_1
   * @param price_1 The new value for price_1
   * @param productId_2 The new value for productId_2
   * @param productName_2 The new value for productName_2
   * @param quantity_2 The new value for quantity_2
   * @param price_2 The new value for price_2
   * @param productId_3 The new value for productId_3
   * @param productName_3 The new value for productName_3
   * @param quantity_3 The new value for quantity_3
   * @param price_3 The new value for price_3
   */
  public Order(java.lang.CharSequence orderId, java.lang.CharSequence customerId, java.lang.CharSequence orderDate, java.lang.CharSequence shippingAddress, java.lang.CharSequence billingAddress, java.lang.CharSequence orderStatus, java.lang.CharSequence paymentMethod, java.lang.CharSequence totalAmount, java.lang.CharSequence currency, java.lang.CharSequence productId_1, java.lang.CharSequence productName_1, java.lang.CharSequence quantity_1, java.lang.CharSequence price_1, java.lang.CharSequence productId_2, java.lang.CharSequence productName_2, java.lang.CharSequence quantity_2, java.lang.CharSequence price_2, java.lang.CharSequence productId_3, java.lang.CharSequence productName_3, java.lang.CharSequence quantity_3, java.lang.CharSequence price_3) {
    this.orderId = orderId;
    this.customerId = customerId;
    this.orderDate = orderDate;
    this.shippingAddress = shippingAddress;
    this.billingAddress = billingAddress;
    this.orderStatus = orderStatus;
    this.paymentMethod = paymentMethod;
    this.totalAmount = totalAmount;
    this.currency = currency;
    this.productId_1 = productId_1;
    this.productName_1 = productName_1;
    this.quantity_1 = quantity_1;
    this.price_1 = price_1;
    this.productId_2 = productId_2;
    this.productName_2 = productName_2;
    this.quantity_2 = quantity_2;
    this.price_2 = price_2;
    this.productId_3 = productId_3;
    this.productName_3 = productName_3;
    this.quantity_3 = quantity_3;
    this.price_3 = price_3;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return orderId;
    case 1: return customerId;
    case 2: return orderDate;
    case 3: return shippingAddress;
    case 4: return billingAddress;
    case 5: return orderStatus;
    case 6: return paymentMethod;
    case 7: return totalAmount;
    case 8: return currency;
    case 9: return productId_1;
    case 10: return productName_1;
    case 11: return quantity_1;
    case 12: return price_1;
    case 13: return productId_2;
    case 14: return productName_2;
    case 15: return quantity_2;
    case 16: return price_2;
    case 17: return productId_3;
    case 18: return productName_3;
    case 19: return quantity_3;
    case 20: return price_3;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: orderId = (java.lang.CharSequence)value$; break;
    case 1: customerId = (java.lang.CharSequence)value$; break;
    case 2: orderDate = (java.lang.CharSequence)value$; break;
    case 3: shippingAddress = (java.lang.CharSequence)value$; break;
    case 4: billingAddress = (java.lang.CharSequence)value$; break;
    case 5: orderStatus = (java.lang.CharSequence)value$; break;
    case 6: paymentMethod = (java.lang.CharSequence)value$; break;
    case 7: totalAmount = (java.lang.CharSequence)value$; break;
    case 8: currency = (java.lang.CharSequence)value$; break;
    case 9: productId_1 = (java.lang.CharSequence)value$; break;
    case 10: productName_1 = (java.lang.CharSequence)value$; break;
    case 11: quantity_1 = (java.lang.CharSequence)value$; break;
    case 12: price_1 = (java.lang.CharSequence)value$; break;
    case 13: productId_2 = (java.lang.CharSequence)value$; break;
    case 14: productName_2 = (java.lang.CharSequence)value$; break;
    case 15: quantity_2 = (java.lang.CharSequence)value$; break;
    case 16: price_2 = (java.lang.CharSequence)value$; break;
    case 17: productId_3 = (java.lang.CharSequence)value$; break;
    case 18: productName_3 = (java.lang.CharSequence)value$; break;
    case 19: quantity_3 = (java.lang.CharSequence)value$; break;
    case 20: price_3 = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'orderId' field.
   * @return The value of the 'orderId' field.
   */
  public java.lang.CharSequence getOrderId() {
    return orderId;
  }

  /**
   * Sets the value of the 'orderId' field.
   * @param value the value to set.
   */
  public void setOrderId(java.lang.CharSequence value) {
    this.orderId = value;
  }

  /**
   * Gets the value of the 'customerId' field.
   * @return The value of the 'customerId' field.
   */
  public java.lang.CharSequence getCustomerId() {
    return customerId;
  }

  /**
   * Sets the value of the 'customerId' field.
   * @param value the value to set.
   */
  public void setCustomerId(java.lang.CharSequence value) {
    this.customerId = value;
  }

  /**
   * Gets the value of the 'orderDate' field.
   * @return The value of the 'orderDate' field.
   */
  public java.lang.CharSequence getOrderDate() {
    return orderDate;
  }

  /**
   * Sets the value of the 'orderDate' field.
   * @param value the value to set.
   */
  public void setOrderDate(java.lang.CharSequence value) {
    this.orderDate = value;
  }

  /**
   * Gets the value of the 'shippingAddress' field.
   * @return The value of the 'shippingAddress' field.
   */
  public java.lang.CharSequence getShippingAddress() {
    return shippingAddress;
  }

  /**
   * Sets the value of the 'shippingAddress' field.
   * @param value the value to set.
   */
  public void setShippingAddress(java.lang.CharSequence value) {
    this.shippingAddress = value;
  }

  /**
   * Gets the value of the 'billingAddress' field.
   * @return The value of the 'billingAddress' field.
   */
  public java.lang.CharSequence getBillingAddress() {
    return billingAddress;
  }

  /**
   * Sets the value of the 'billingAddress' field.
   * @param value the value to set.
   */
  public void setBillingAddress(java.lang.CharSequence value) {
    this.billingAddress = value;
  }

  /**
   * Gets the value of the 'orderStatus' field.
   * @return The value of the 'orderStatus' field.
   */
  public java.lang.CharSequence getOrderStatus() {
    return orderStatus;
  }

  /**
   * Sets the value of the 'orderStatus' field.
   * @param value the value to set.
   */
  public void setOrderStatus(java.lang.CharSequence value) {
    this.orderStatus = value;
  }

  /**
   * Gets the value of the 'paymentMethod' field.
   * @return The value of the 'paymentMethod' field.
   */
  public java.lang.CharSequence getPaymentMethod() {
    return paymentMethod;
  }

  /**
   * Sets the value of the 'paymentMethod' field.
   * @param value the value to set.
   */
  public void setPaymentMethod(java.lang.CharSequence value) {
    this.paymentMethod = value;
  }

  /**
   * Gets the value of the 'totalAmount' field.
   * @return The value of the 'totalAmount' field.
   */
  public java.lang.CharSequence getTotalAmount() {
    return totalAmount;
  }

  /**
   * Sets the value of the 'totalAmount' field.
   * @param value the value to set.
   */
  public void setTotalAmount(java.lang.CharSequence value) {
    this.totalAmount = value;
  }

  /**
   * Gets the value of the 'currency' field.
   * @return The value of the 'currency' field.
   */
  public java.lang.CharSequence getCurrency() {
    return currency;
  }

  /**
   * Sets the value of the 'currency' field.
   * @param value the value to set.
   */
  public void setCurrency(java.lang.CharSequence value) {
    this.currency = value;
  }

  /**
   * Gets the value of the 'productId_1' field.
   * @return The value of the 'productId_1' field.
   */
  public java.lang.CharSequence getProductId1() {
    return productId_1;
  }

  /**
   * Sets the value of the 'productId_1' field.
   * @param value the value to set.
   */
  public void setProductId1(java.lang.CharSequence value) {
    this.productId_1 = value;
  }

  /**
   * Gets the value of the 'productName_1' field.
   * @return The value of the 'productName_1' field.
   */
  public java.lang.CharSequence getProductName1() {
    return productName_1;
  }

  /**
   * Sets the value of the 'productName_1' field.
   * @param value the value to set.
   */
  public void setProductName1(java.lang.CharSequence value) {
    this.productName_1 = value;
  }

  /**
   * Gets the value of the 'quantity_1' field.
   * @return The value of the 'quantity_1' field.
   */
  public java.lang.CharSequence getQuantity1() {
    return quantity_1;
  }

  /**
   * Sets the value of the 'quantity_1' field.
   * @param value the value to set.
   */
  public void setQuantity1(java.lang.CharSequence value) {
    this.quantity_1 = value;
  }

  /**
   * Gets the value of the 'price_1' field.
   * @return The value of the 'price_1' field.
   */
  public java.lang.CharSequence getPrice1() {
    return price_1;
  }

  /**
   * Sets the value of the 'price_1' field.
   * @param value the value to set.
   */
  public void setPrice1(java.lang.CharSequence value) {
    this.price_1 = value;
  }

  /**
   * Gets the value of the 'productId_2' field.
   * @return The value of the 'productId_2' field.
   */
  public java.lang.CharSequence getProductId2() {
    return productId_2;
  }

  /**
   * Sets the value of the 'productId_2' field.
   * @param value the value to set.
   */
  public void setProductId2(java.lang.CharSequence value) {
    this.productId_2 = value;
  }

  /**
   * Gets the value of the 'productName_2' field.
   * @return The value of the 'productName_2' field.
   */
  public java.lang.CharSequence getProductName2() {
    return productName_2;
  }

  /**
   * Sets the value of the 'productName_2' field.
   * @param value the value to set.
   */
  public void setProductName2(java.lang.CharSequence value) {
    this.productName_2 = value;
  }

  /**
   * Gets the value of the 'quantity_2' field.
   * @return The value of the 'quantity_2' field.
   */
  public java.lang.CharSequence getQuantity2() {
    return quantity_2;
  }

  /**
   * Sets the value of the 'quantity_2' field.
   * @param value the value to set.
   */
  public void setQuantity2(java.lang.CharSequence value) {
    this.quantity_2 = value;
  }

  /**
   * Gets the value of the 'price_2' field.
   * @return The value of the 'price_2' field.
   */
  public java.lang.CharSequence getPrice2() {
    return price_2;
  }

  /**
   * Sets the value of the 'price_2' field.
   * @param value the value to set.
   */
  public void setPrice2(java.lang.CharSequence value) {
    this.price_2 = value;
  }

  /**
   * Gets the value of the 'productId_3' field.
   * @return The value of the 'productId_3' field.
   */
  public java.lang.CharSequence getProductId3() {
    return productId_3;
  }

  /**
   * Sets the value of the 'productId_3' field.
   * @param value the value to set.
   */
  public void setProductId3(java.lang.CharSequence value) {
    this.productId_3 = value;
  }

  /**
   * Gets the value of the 'productName_3' field.
   * @return The value of the 'productName_3' field.
   */
  public java.lang.CharSequence getProductName3() {
    return productName_3;
  }

  /**
   * Sets the value of the 'productName_3' field.
   * @param value the value to set.
   */
  public void setProductName3(java.lang.CharSequence value) {
    this.productName_3 = value;
  }

  /**
   * Gets the value of the 'quantity_3' field.
   * @return The value of the 'quantity_3' field.
   */
  public java.lang.CharSequence getQuantity3() {
    return quantity_3;
  }

  /**
   * Sets the value of the 'quantity_3' field.
   * @param value the value to set.
   */
  public void setQuantity3(java.lang.CharSequence value) {
    this.quantity_3 = value;
  }

  /**
   * Gets the value of the 'price_3' field.
   * @return The value of the 'price_3' field.
   */
  public java.lang.CharSequence getPrice3() {
    return price_3;
  }

  /**
   * Sets the value of the 'price_3' field.
   * @param value the value to set.
   */
  public void setPrice3(java.lang.CharSequence value) {
    this.price_3 = value;
  }

  /**
   * Creates a new Order RecordBuilder.
   * @return A new Order RecordBuilder
   */
  public static com.dione.dto.Order.Builder newBuilder() {
    return new com.dione.dto.Order.Builder();
  }

  /**
   * Creates a new Order RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Order RecordBuilder
   */
  public static com.dione.dto.Order.Builder newBuilder(com.dione.dto.Order.Builder other) {
    return new com.dione.dto.Order.Builder(other);
  }

  /**
   * Creates a new Order RecordBuilder by copying an existing Order instance.
   * @param other The existing instance to copy.
   * @return A new Order RecordBuilder
   */
  public static com.dione.dto.Order.Builder newBuilder(com.dione.dto.Order other) {
    return new com.dione.dto.Order.Builder(other);
  }

  /**
   * RecordBuilder for Order instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Order>
    implements org.apache.avro.data.RecordBuilder<Order> {

    private java.lang.CharSequence orderId;
    private java.lang.CharSequence customerId;
    private java.lang.CharSequence orderDate;
    private java.lang.CharSequence shippingAddress;
    private java.lang.CharSequence billingAddress;
    private java.lang.CharSequence orderStatus;
    private java.lang.CharSequence paymentMethod;
    private java.lang.CharSequence totalAmount;
    private java.lang.CharSequence currency;
    private java.lang.CharSequence productId_1;
    private java.lang.CharSequence productName_1;
    private java.lang.CharSequence quantity_1;
    private java.lang.CharSequence price_1;
    private java.lang.CharSequence productId_2;
    private java.lang.CharSequence productName_2;
    private java.lang.CharSequence quantity_2;
    private java.lang.CharSequence price_2;
    private java.lang.CharSequence productId_3;
    private java.lang.CharSequence productName_3;
    private java.lang.CharSequence quantity_3;
    private java.lang.CharSequence price_3;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.dione.dto.Order.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.orderId)) {
        this.orderId = data().deepCopy(fields()[0].schema(), other.orderId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.customerId)) {
        this.customerId = data().deepCopy(fields()[1].schema(), other.customerId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.orderDate)) {
        this.orderDate = data().deepCopy(fields()[2].schema(), other.orderDate);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.shippingAddress)) {
        this.shippingAddress = data().deepCopy(fields()[3].schema(), other.shippingAddress);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.billingAddress)) {
        this.billingAddress = data().deepCopy(fields()[4].schema(), other.billingAddress);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.orderStatus)) {
        this.orderStatus = data().deepCopy(fields()[5].schema(), other.orderStatus);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.paymentMethod)) {
        this.paymentMethod = data().deepCopy(fields()[6].schema(), other.paymentMethod);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.totalAmount)) {
        this.totalAmount = data().deepCopy(fields()[7].schema(), other.totalAmount);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.currency)) {
        this.currency = data().deepCopy(fields()[8].schema(), other.currency);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.productId_1)) {
        this.productId_1 = data().deepCopy(fields()[9].schema(), other.productId_1);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.productName_1)) {
        this.productName_1 = data().deepCopy(fields()[10].schema(), other.productName_1);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.quantity_1)) {
        this.quantity_1 = data().deepCopy(fields()[11].schema(), other.quantity_1);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.price_1)) {
        this.price_1 = data().deepCopy(fields()[12].schema(), other.price_1);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.productId_2)) {
        this.productId_2 = data().deepCopy(fields()[13].schema(), other.productId_2);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.productName_2)) {
        this.productName_2 = data().deepCopy(fields()[14].schema(), other.productName_2);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.quantity_2)) {
        this.quantity_2 = data().deepCopy(fields()[15].schema(), other.quantity_2);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.price_2)) {
        this.price_2 = data().deepCopy(fields()[16].schema(), other.price_2);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.productId_3)) {
        this.productId_3 = data().deepCopy(fields()[17].schema(), other.productId_3);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.productName_3)) {
        this.productName_3 = data().deepCopy(fields()[18].schema(), other.productName_3);
        fieldSetFlags()[18] = true;
      }
      if (isValidValue(fields()[19], other.quantity_3)) {
        this.quantity_3 = data().deepCopy(fields()[19].schema(), other.quantity_3);
        fieldSetFlags()[19] = true;
      }
      if (isValidValue(fields()[20], other.price_3)) {
        this.price_3 = data().deepCopy(fields()[20].schema(), other.price_3);
        fieldSetFlags()[20] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Order instance
     * @param other The existing instance to copy.
     */
    private Builder(com.dione.dto.Order other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.orderId)) {
        this.orderId = data().deepCopy(fields()[0].schema(), other.orderId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.customerId)) {
        this.customerId = data().deepCopy(fields()[1].schema(), other.customerId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.orderDate)) {
        this.orderDate = data().deepCopy(fields()[2].schema(), other.orderDate);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.shippingAddress)) {
        this.shippingAddress = data().deepCopy(fields()[3].schema(), other.shippingAddress);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.billingAddress)) {
        this.billingAddress = data().deepCopy(fields()[4].schema(), other.billingAddress);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.orderStatus)) {
        this.orderStatus = data().deepCopy(fields()[5].schema(), other.orderStatus);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.paymentMethod)) {
        this.paymentMethod = data().deepCopy(fields()[6].schema(), other.paymentMethod);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.totalAmount)) {
        this.totalAmount = data().deepCopy(fields()[7].schema(), other.totalAmount);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.currency)) {
        this.currency = data().deepCopy(fields()[8].schema(), other.currency);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.productId_1)) {
        this.productId_1 = data().deepCopy(fields()[9].schema(), other.productId_1);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.productName_1)) {
        this.productName_1 = data().deepCopy(fields()[10].schema(), other.productName_1);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.quantity_1)) {
        this.quantity_1 = data().deepCopy(fields()[11].schema(), other.quantity_1);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.price_1)) {
        this.price_1 = data().deepCopy(fields()[12].schema(), other.price_1);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.productId_2)) {
        this.productId_2 = data().deepCopy(fields()[13].schema(), other.productId_2);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.productName_2)) {
        this.productName_2 = data().deepCopy(fields()[14].schema(), other.productName_2);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.quantity_2)) {
        this.quantity_2 = data().deepCopy(fields()[15].schema(), other.quantity_2);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.price_2)) {
        this.price_2 = data().deepCopy(fields()[16].schema(), other.price_2);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.productId_3)) {
        this.productId_3 = data().deepCopy(fields()[17].schema(), other.productId_3);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.productName_3)) {
        this.productName_3 = data().deepCopy(fields()[18].schema(), other.productName_3);
        fieldSetFlags()[18] = true;
      }
      if (isValidValue(fields()[19], other.quantity_3)) {
        this.quantity_3 = data().deepCopy(fields()[19].schema(), other.quantity_3);
        fieldSetFlags()[19] = true;
      }
      if (isValidValue(fields()[20], other.price_3)) {
        this.price_3 = data().deepCopy(fields()[20].schema(), other.price_3);
        fieldSetFlags()[20] = true;
      }
    }

    /**
      * Gets the value of the 'orderId' field.
      * @return The value.
      */
    public java.lang.CharSequence getOrderId() {
      return orderId;
    }

    /**
      * Sets the value of the 'orderId' field.
      * @param value The value of 'orderId'.
      * @return This builder.
      */
    public com.dione.dto.Order.Builder setOrderId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.orderId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'orderId' field has been set.
      * @return True if the 'orderId' field has been set, false otherwise.
      */
    public boolean hasOrderId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'orderId' field.
      * @return This builder.
      */
    public com.dione.dto.Order.Builder clearOrderId() {
      orderId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'customerId' field.
      * @return The value.
      */
    public java.lang.CharSequence getCustomerId() {
      return customerId;
    }

    /**
      * Sets the value of the 'customerId' field.
      * @param value The value of 'customerId'.
      * @return This builder.
      */
    public com.dione.dto.Order.Builder setCustomerId(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.customerId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'customerId' field has been set.
      * @return True if the 'customerId' field has been set, false otherwise.
      */
    public boolean hasCustomerId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'customerId' field.
      * @return This builder.
      */
    public com.dione.dto.Order.Builder clearCustomerId() {
      customerId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'orderDate' field.
      * @return The value.
      */
    public java.lang.CharSequence getOrderDate() {
      return orderDate;
    }

    /**
      * Sets the value of the 'orderDate' field.
      * @param value The value of 'orderDate'.
      * @return This builder.
      */
    public com.dione.dto.Order.Builder setOrderDate(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.orderDate = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'orderDate' field has been set.
      * @return True if the 'orderDate' field has been set, false otherwise.
      */
    public boolean hasOrderDate() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'orderDate' field.
      * @return This builder.
      */
    public com.dione.dto.Order.Builder clearOrderDate() {
      orderDate = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'shippingAddress' field.
      * @return The value.
      */
    public java.lang.CharSequence getShippingAddress() {
      return shippingAddress;
    }

    /**
      * Sets the value of the 'shippingAddress' field.
      * @param value The value of 'shippingAddress'.
      * @return This builder.
      */
    public com.dione.dto.Order.Builder setShippingAddress(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.shippingAddress = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'shippingAddress' field has been set.
      * @return True if the 'shippingAddress' field has been set, false otherwise.
      */
    public boolean hasShippingAddress() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'shippingAddress' field.
      * @return This builder.
      */
    public com.dione.dto.Order.Builder clearShippingAddress() {
      shippingAddress = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'billingAddress' field.
      * @return The value.
      */
    public java.lang.CharSequence getBillingAddress() {
      return billingAddress;
    }

    /**
      * Sets the value of the 'billingAddress' field.
      * @param value The value of 'billingAddress'.
      * @return This builder.
      */
    public com.dione.dto.Order.Builder setBillingAddress(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.billingAddress = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'billingAddress' field has been set.
      * @return True if the 'billingAddress' field has been set, false otherwise.
      */
    public boolean hasBillingAddress() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'billingAddress' field.
      * @return This builder.
      */
    public com.dione.dto.Order.Builder clearBillingAddress() {
      billingAddress = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'orderStatus' field.
      * @return The value.
      */
    public java.lang.CharSequence getOrderStatus() {
      return orderStatus;
    }

    /**
      * Sets the value of the 'orderStatus' field.
      * @param value The value of 'orderStatus'.
      * @return This builder.
      */
    public com.dione.dto.Order.Builder setOrderStatus(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.orderStatus = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'orderStatus' field has been set.
      * @return True if the 'orderStatus' field has been set, false otherwise.
      */
    public boolean hasOrderStatus() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'orderStatus' field.
      * @return This builder.
      */
    public com.dione.dto.Order.Builder clearOrderStatus() {
      orderStatus = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'paymentMethod' field.
      * @return The value.
      */
    public java.lang.CharSequence getPaymentMethod() {
      return paymentMethod;
    }

    /**
      * Sets the value of the 'paymentMethod' field.
      * @param value The value of 'paymentMethod'.
      * @return This builder.
      */
    public com.dione.dto.Order.Builder setPaymentMethod(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.paymentMethod = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'paymentMethod' field has been set.
      * @return True if the 'paymentMethod' field has been set, false otherwise.
      */
    public boolean hasPaymentMethod() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'paymentMethod' field.
      * @return This builder.
      */
    public com.dione.dto.Order.Builder clearPaymentMethod() {
      paymentMethod = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'totalAmount' field.
      * @return The value.
      */
    public java.lang.CharSequence getTotalAmount() {
      return totalAmount;
    }

    /**
      * Sets the value of the 'totalAmount' field.
      * @param value The value of 'totalAmount'.
      * @return This builder.
      */
    public com.dione.dto.Order.Builder setTotalAmount(java.lang.CharSequence value) {
      validate(fields()[7], value);
      this.totalAmount = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'totalAmount' field has been set.
      * @return True if the 'totalAmount' field has been set, false otherwise.
      */
    public boolean hasTotalAmount() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'totalAmount' field.
      * @return This builder.
      */
    public com.dione.dto.Order.Builder clearTotalAmount() {
      totalAmount = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'currency' field.
      * @return The value.
      */
    public java.lang.CharSequence getCurrency() {
      return currency;
    }

    /**
      * Sets the value of the 'currency' field.
      * @param value The value of 'currency'.
      * @return This builder.
      */
    public com.dione.dto.Order.Builder setCurrency(java.lang.CharSequence value) {
      validate(fields()[8], value);
      this.currency = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'currency' field has been set.
      * @return True if the 'currency' field has been set, false otherwise.
      */
    public boolean hasCurrency() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'currency' field.
      * @return This builder.
      */
    public com.dione.dto.Order.Builder clearCurrency() {
      currency = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'productId_1' field.
      * @return The value.
      */
    public java.lang.CharSequence getProductId1() {
      return productId_1;
    }

    /**
      * Sets the value of the 'productId_1' field.
      * @param value The value of 'productId_1'.
      * @return This builder.
      */
    public com.dione.dto.Order.Builder setProductId1(java.lang.CharSequence value) {
      validate(fields()[9], value);
      this.productId_1 = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'productId_1' field has been set.
      * @return True if the 'productId_1' field has been set, false otherwise.
      */
    public boolean hasProductId1() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'productId_1' field.
      * @return This builder.
      */
    public com.dione.dto.Order.Builder clearProductId1() {
      productId_1 = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'productName_1' field.
      * @return The value.
      */
    public java.lang.CharSequence getProductName1() {
      return productName_1;
    }

    /**
      * Sets the value of the 'productName_1' field.
      * @param value The value of 'productName_1'.
      * @return This builder.
      */
    public com.dione.dto.Order.Builder setProductName1(java.lang.CharSequence value) {
      validate(fields()[10], value);
      this.productName_1 = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'productName_1' field has been set.
      * @return True if the 'productName_1' field has been set, false otherwise.
      */
    public boolean hasProductName1() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'productName_1' field.
      * @return This builder.
      */
    public com.dione.dto.Order.Builder clearProductName1() {
      productName_1 = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'quantity_1' field.
      * @return The value.
      */
    public java.lang.CharSequence getQuantity1() {
      return quantity_1;
    }

    /**
      * Sets the value of the 'quantity_1' field.
      * @param value The value of 'quantity_1'.
      * @return This builder.
      */
    public com.dione.dto.Order.Builder setQuantity1(java.lang.CharSequence value) {
      validate(fields()[11], value);
      this.quantity_1 = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'quantity_1' field has been set.
      * @return True if the 'quantity_1' field has been set, false otherwise.
      */
    public boolean hasQuantity1() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'quantity_1' field.
      * @return This builder.
      */
    public com.dione.dto.Order.Builder clearQuantity1() {
      quantity_1 = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'price_1' field.
      * @return The value.
      */
    public java.lang.CharSequence getPrice1() {
      return price_1;
    }

    /**
      * Sets the value of the 'price_1' field.
      * @param value The value of 'price_1'.
      * @return This builder.
      */
    public com.dione.dto.Order.Builder setPrice1(java.lang.CharSequence value) {
      validate(fields()[12], value);
      this.price_1 = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'price_1' field has been set.
      * @return True if the 'price_1' field has been set, false otherwise.
      */
    public boolean hasPrice1() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'price_1' field.
      * @return This builder.
      */
    public com.dione.dto.Order.Builder clearPrice1() {
      price_1 = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'productId_2' field.
      * @return The value.
      */
    public java.lang.CharSequence getProductId2() {
      return productId_2;
    }

    /**
      * Sets the value of the 'productId_2' field.
      * @param value The value of 'productId_2'.
      * @return This builder.
      */
    public com.dione.dto.Order.Builder setProductId2(java.lang.CharSequence value) {
      validate(fields()[13], value);
      this.productId_2 = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'productId_2' field has been set.
      * @return True if the 'productId_2' field has been set, false otherwise.
      */
    public boolean hasProductId2() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'productId_2' field.
      * @return This builder.
      */
    public com.dione.dto.Order.Builder clearProductId2() {
      productId_2 = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    /**
      * Gets the value of the 'productName_2' field.
      * @return The value.
      */
    public java.lang.CharSequence getProductName2() {
      return productName_2;
    }

    /**
      * Sets the value of the 'productName_2' field.
      * @param value The value of 'productName_2'.
      * @return This builder.
      */
    public com.dione.dto.Order.Builder setProductName2(java.lang.CharSequence value) {
      validate(fields()[14], value);
      this.productName_2 = value;
      fieldSetFlags()[14] = true;
      return this;
    }

    /**
      * Checks whether the 'productName_2' field has been set.
      * @return True if the 'productName_2' field has been set, false otherwise.
      */
    public boolean hasProductName2() {
      return fieldSetFlags()[14];
    }


    /**
      * Clears the value of the 'productName_2' field.
      * @return This builder.
      */
    public com.dione.dto.Order.Builder clearProductName2() {
      productName_2 = null;
      fieldSetFlags()[14] = false;
      return this;
    }

    /**
      * Gets the value of the 'quantity_2' field.
      * @return The value.
      */
    public java.lang.CharSequence getQuantity2() {
      return quantity_2;
    }

    /**
      * Sets the value of the 'quantity_2' field.
      * @param value The value of 'quantity_2'.
      * @return This builder.
      */
    public com.dione.dto.Order.Builder setQuantity2(java.lang.CharSequence value) {
      validate(fields()[15], value);
      this.quantity_2 = value;
      fieldSetFlags()[15] = true;
      return this;
    }

    /**
      * Checks whether the 'quantity_2' field has been set.
      * @return True if the 'quantity_2' field has been set, false otherwise.
      */
    public boolean hasQuantity2() {
      return fieldSetFlags()[15];
    }


    /**
      * Clears the value of the 'quantity_2' field.
      * @return This builder.
      */
    public com.dione.dto.Order.Builder clearQuantity2() {
      quantity_2 = null;
      fieldSetFlags()[15] = false;
      return this;
    }

    /**
      * Gets the value of the 'price_2' field.
      * @return The value.
      */
    public java.lang.CharSequence getPrice2() {
      return price_2;
    }

    /**
      * Sets the value of the 'price_2' field.
      * @param value The value of 'price_2'.
      * @return This builder.
      */
    public com.dione.dto.Order.Builder setPrice2(java.lang.CharSequence value) {
      validate(fields()[16], value);
      this.price_2 = value;
      fieldSetFlags()[16] = true;
      return this;
    }

    /**
      * Checks whether the 'price_2' field has been set.
      * @return True if the 'price_2' field has been set, false otherwise.
      */
    public boolean hasPrice2() {
      return fieldSetFlags()[16];
    }


    /**
      * Clears the value of the 'price_2' field.
      * @return This builder.
      */
    public com.dione.dto.Order.Builder clearPrice2() {
      price_2 = null;
      fieldSetFlags()[16] = false;
      return this;
    }

    /**
      * Gets the value of the 'productId_3' field.
      * @return The value.
      */
    public java.lang.CharSequence getProductId3() {
      return productId_3;
    }

    /**
      * Sets the value of the 'productId_3' field.
      * @param value The value of 'productId_3'.
      * @return This builder.
      */
    public com.dione.dto.Order.Builder setProductId3(java.lang.CharSequence value) {
      validate(fields()[17], value);
      this.productId_3 = value;
      fieldSetFlags()[17] = true;
      return this;
    }

    /**
      * Checks whether the 'productId_3' field has been set.
      * @return True if the 'productId_3' field has been set, false otherwise.
      */
    public boolean hasProductId3() {
      return fieldSetFlags()[17];
    }


    /**
      * Clears the value of the 'productId_3' field.
      * @return This builder.
      */
    public com.dione.dto.Order.Builder clearProductId3() {
      productId_3 = null;
      fieldSetFlags()[17] = false;
      return this;
    }

    /**
      * Gets the value of the 'productName_3' field.
      * @return The value.
      */
    public java.lang.CharSequence getProductName3() {
      return productName_3;
    }

    /**
      * Sets the value of the 'productName_3' field.
      * @param value The value of 'productName_3'.
      * @return This builder.
      */
    public com.dione.dto.Order.Builder setProductName3(java.lang.CharSequence value) {
      validate(fields()[18], value);
      this.productName_3 = value;
      fieldSetFlags()[18] = true;
      return this;
    }

    /**
      * Checks whether the 'productName_3' field has been set.
      * @return True if the 'productName_3' field has been set, false otherwise.
      */
    public boolean hasProductName3() {
      return fieldSetFlags()[18];
    }


    /**
      * Clears the value of the 'productName_3' field.
      * @return This builder.
      */
    public com.dione.dto.Order.Builder clearProductName3() {
      productName_3 = null;
      fieldSetFlags()[18] = false;
      return this;
    }

    /**
      * Gets the value of the 'quantity_3' field.
      * @return The value.
      */
    public java.lang.CharSequence getQuantity3() {
      return quantity_3;
    }

    /**
      * Sets the value of the 'quantity_3' field.
      * @param value The value of 'quantity_3'.
      * @return This builder.
      */
    public com.dione.dto.Order.Builder setQuantity3(java.lang.CharSequence value) {
      validate(fields()[19], value);
      this.quantity_3 = value;
      fieldSetFlags()[19] = true;
      return this;
    }

    /**
      * Checks whether the 'quantity_3' field has been set.
      * @return True if the 'quantity_3' field has been set, false otherwise.
      */
    public boolean hasQuantity3() {
      return fieldSetFlags()[19];
    }


    /**
      * Clears the value of the 'quantity_3' field.
      * @return This builder.
      */
    public com.dione.dto.Order.Builder clearQuantity3() {
      quantity_3 = null;
      fieldSetFlags()[19] = false;
      return this;
    }

    /**
      * Gets the value of the 'price_3' field.
      * @return The value.
      */
    public java.lang.CharSequence getPrice3() {
      return price_3;
    }

    /**
      * Sets the value of the 'price_3' field.
      * @param value The value of 'price_3'.
      * @return This builder.
      */
    public com.dione.dto.Order.Builder setPrice3(java.lang.CharSequence value) {
      validate(fields()[20], value);
      this.price_3 = value;
      fieldSetFlags()[20] = true;
      return this;
    }

    /**
      * Checks whether the 'price_3' field has been set.
      * @return True if the 'price_3' field has been set, false otherwise.
      */
    public boolean hasPrice3() {
      return fieldSetFlags()[20];
    }


    /**
      * Clears the value of the 'price_3' field.
      * @return This builder.
      */
    public com.dione.dto.Order.Builder clearPrice3() {
      price_3 = null;
      fieldSetFlags()[20] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Order build() {
      try {
        Order record = new Order();
        record.orderId = fieldSetFlags()[0] ? this.orderId : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.customerId = fieldSetFlags()[1] ? this.customerId : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.orderDate = fieldSetFlags()[2] ? this.orderDate : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.shippingAddress = fieldSetFlags()[3] ? this.shippingAddress : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.billingAddress = fieldSetFlags()[4] ? this.billingAddress : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.orderStatus = fieldSetFlags()[5] ? this.orderStatus : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.paymentMethod = fieldSetFlags()[6] ? this.paymentMethod : (java.lang.CharSequence) defaultValue(fields()[6]);
        record.totalAmount = fieldSetFlags()[7] ? this.totalAmount : (java.lang.CharSequence) defaultValue(fields()[7]);
        record.currency = fieldSetFlags()[8] ? this.currency : (java.lang.CharSequence) defaultValue(fields()[8]);
        record.productId_1 = fieldSetFlags()[9] ? this.productId_1 : (java.lang.CharSequence) defaultValue(fields()[9]);
        record.productName_1 = fieldSetFlags()[10] ? this.productName_1 : (java.lang.CharSequence) defaultValue(fields()[10]);
        record.quantity_1 = fieldSetFlags()[11] ? this.quantity_1 : (java.lang.CharSequence) defaultValue(fields()[11]);
        record.price_1 = fieldSetFlags()[12] ? this.price_1 : (java.lang.CharSequence) defaultValue(fields()[12]);
        record.productId_2 = fieldSetFlags()[13] ? this.productId_2 : (java.lang.CharSequence) defaultValue(fields()[13]);
        record.productName_2 = fieldSetFlags()[14] ? this.productName_2 : (java.lang.CharSequence) defaultValue(fields()[14]);
        record.quantity_2 = fieldSetFlags()[15] ? this.quantity_2 : (java.lang.CharSequence) defaultValue(fields()[15]);
        record.price_2 = fieldSetFlags()[16] ? this.price_2 : (java.lang.CharSequence) defaultValue(fields()[16]);
        record.productId_3 = fieldSetFlags()[17] ? this.productId_3 : (java.lang.CharSequence) defaultValue(fields()[17]);
        record.productName_3 = fieldSetFlags()[18] ? this.productName_3 : (java.lang.CharSequence) defaultValue(fields()[18]);
        record.quantity_3 = fieldSetFlags()[19] ? this.quantity_3 : (java.lang.CharSequence) defaultValue(fields()[19]);
        record.price_3 = fieldSetFlags()[20] ? this.price_3 : (java.lang.CharSequence) defaultValue(fields()[20]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Order>
    WRITER$ = (org.apache.avro.io.DatumWriter<Order>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Order>
    READER$ = (org.apache.avro.io.DatumReader<Order>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
